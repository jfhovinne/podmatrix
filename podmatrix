#!/usr/bin/env bash
# This script was generated by bashly 0.9.4 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
podmatrix_usage() {
  if [[ -n $long_usage ]]; then
    printf "podmatrix - A script which executes commands within a 'matrix' of Podman containers\n"
    echo

  else
    printf "podmatrix - A script which executes commands within a 'matrix' of Podman containers\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  podmatrix COMMAND\n"
  printf "  podmatrix [COMMAND] --help | -h\n"
  printf "  podmatrix --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Execute a command inside Podman containers\n" "exec"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
podmatrix_exec_usage() {
  if [[ -n $long_usage ]]; then
    printf "podmatrix exec - Execute a command inside Podman containers\n"
    echo

  else
    printf "podmatrix exec - Execute a command inside Podman containers\n"
    echo

  fi

  printf "Alias: e\n"
  echo

  printf "%s\n" "Usage:"
  printf "  podmatrix exec COMMAND [OPTIONS]\n"
  printf "  podmatrix exec --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--source, -s SOURCE"
    printf "    Local source path to copy into containers\n"
    echo

    # :flag.usage
    printf "  %s\n" "--target, -t TARGET"
    printf "    Container path to copy source to and where command will be executed\n"
    echo

    # :flag.usage
    printf "  %s\n" "--image, -i IMAGE (repeatable)"
    printf "    The container image to run\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "COMMAND"
    printf "    The command to execute\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  podmatrix exec ./test.sh --source . --target /tmp/src --image python:3.9\n  --image python:3.10 --image python:3.11\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
  if ((${#args[@]})); then
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi
}

# :command.command_functions
# :command.function
podmatrix_exec_command() {
  # src/exec_command.sh
  command=${args[command]}
  source=${args[--source]}
  target=${args[--target]}
  eval "images=(${args[--image]})"
  exitcode=0

  for image in "${images[@]}"; do
    >&2 echo "Launching ${image}"
    CT=$(podman run -itd ${image} /bin/sh)
    set +e
    if [[ -n ${source} ]] && [[ -n ${target} ]]; then
      >&2 echo "Copying ${source} to ${target}"
      podman cp $source $CT:$target
      >&2 echo "Executing command"
      podman exec $CT bash -c "cd $target && ${command}"
      ((exitcode+=$?))
    else
      >&2 echo "Executing command"
      podman exec $CT bash -c "${command}"
      ((exitcode+=$?))
    fi
    set -e
    >&2 echo "Stopping ${image}"
    podman stop $CT > /dev/null
    >&2 echo "Removing ${image}"
    podman rm $CT > /dev/null
  done

  exit $exitcode

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        podmatrix_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    exec | e)
      action="exec"
      shift
      podmatrix_exec_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      podmatrix_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
podmatrix_exec_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        podmatrix_exec_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="exec"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --source | -s)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--source']="$2"
          shift
          shift
        else
          printf "%s\n" "--source requires an argument: --source, -s SOURCE" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --target | -t)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--target']="$2"
          shift
          shift
        else
          printf "%s\n" "--target requires an argument: --target, -t TARGET" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --image | -i)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          if [[ -z ${args['--image']+x} ]]; then
            args['--image']="\"$2\""
          else
            args['--image']="${args[--image]} \"$2\""
          fi
          shift
          shift
        else
          printf "%s\n" "--image requires an argument: --image, -i IMAGE" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['command']+x} ]]; then

          args['command']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['command']+x} ]]; then
    printf "missing required argument: COMMAND\nusage: podmatrix exec COMMAND [OPTIONS]\n" >&2
    exit 1
  fi

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

  # src/initialize.sh

}

# :command.run
run() {
  declare -A args=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "exec")
      if [[ ${args['--help']:-} ]]; then
        long_usage=yes
        podmatrix_exec_usage
      else
        podmatrix_exec_command
      fi
      ;;

  esac
}

initialize
run "$@"
